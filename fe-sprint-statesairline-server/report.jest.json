{"numFailedTestSuites":1,"numFailedTests":2,"numPassedTestSuites":0,"numPassedTests":11,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":13,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1660622935020,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["flight Router"],"failureMessages":[],"fullName":"flight Router GET /flight 요청은 파싱 가능한 JSON 문자열을 돌려줘야 합니다","location":null,"status":"passed","title":"GET /flight 요청은 파싱 가능한 JSON 문자열을 돌려줘야 합니다"},{"ancestorTitles":["flight Router"],"failureMessages":[],"fullName":"flight Router GET /flight 요청의 응답은 배열의 형태여야 합니다","location":null,"status":"passed","title":"GET /flight 요청의 응답은 배열의 형태여야 합니다"},{"ancestorTitles":["flight Router"],"failureMessages":[],"fullName":"flight Router GET /flight 요청의 응답 객체는 `uuid, departure, destination, departure_times, arrival_times`를 포함해야 합니다","location":null,"status":"passed","title":"GET /flight 요청의 응답 객체는 `uuid, departure, destination, departure_times, arrival_times`를 포함해야 합니다"},{"ancestorTitles":["flight Router"],"failureMessages":[],"fullName":"flight Router GET /flight?departure_times=2021-12-03T12:00:00&arrival_times=2021-12-03T12:00:00를 입력하면 조건에 해당하는 객체를 응답으로 보냅니다","location":null,"status":"passed","title":"GET /flight?departure_times=2021-12-03T12:00:00&arrival_times=2021-12-03T12:00:00를 입력하면 조건에 해당하는 객체를 응답으로 보냅니다"},{"ancestorTitles":["flight Router"],"failureMessages":[],"fullName":"flight Router GET /flight?departure=CJU&destination=ICN 을 입력하면 조건에 해당하는 객체를 응답으로 보냅니다","location":null,"status":"passed","title":"GET /flight?departure=CJU&destination=ICN 을 입력하면 조건에 해당하는 객체를 응답으로 보냅니다"},{"ancestorTitles":["flight Router"],"failureMessages":[],"fullName":"flight Router GET /flight/:uuid 요청의 응답 객체는 `uuid, departure, destination, departure_times, arrival_times`를 포함해야 합니다","location":null,"status":"passed","title":"GET /flight/:uuid 요청의 응답 객체는 `uuid, departure, destination, departure_times, arrival_times`를 포함해야 합니다"},{"ancestorTitles":["Book Router"],"failureMessages":[],"fullName":"Book Router GET /book 요청의 응답은 배열의 형태여야 합니다","location":null,"status":"passed","title":"GET /book 요청의 응답은 배열의 형태여야 합니다"},{"ancestorTitles":["Book Router"],"failureMessages":[],"fullName":"Book Router GET /book 요청은 파싱 가능한 JSON 문자열을 돌려줘야 합니다","location":null,"status":"passed","title":"GET /book 요청은 파싱 가능한 JSON 문자열을 돌려줘야 합니다"},{"ancestorTitles":["Book Router"],"failureMessages":[],"fullName":"Book Router POST /book 요청시, uuid, name, phone 데이터가 booking 배열에 객체 형태로 저장되어야 합니다.","location":null,"status":"passed","title":"POST /book 요청시, uuid, name, phone 데이터가 booking 배열에 객체 형태로 저장되어야 합니다."},{"ancestorTitles":["Book Router"],"failureMessages":[],"fullName":"Book Router GET /book/:phone 요청은 특정 예약자 전화번호에 대한 예약 데이터를 응답으로 보냅니다","location":null,"status":"passed","title":"GET /book/:phone 요청은 특정 예약자 전화번호에 대한 예약 데이터를 응답으로 보냅니다"},{"ancestorTitles":["Book Router"],"failureMessages":[],"fullName":"Book Router GET /book/:phone/:flight_uuid 요청은 특정 항공편의 예약자 전화번호에 대한 예약 데이터를 응답으로 보냅니다","location":null,"status":"passed","title":"GET /book/:phone/:flight_uuid 요청은 특정 항공편의 예약자 전화번호에 대한 예약 데이터를 응답으로 보냅니다"},{"ancestorTitles":["Advanced Challenges"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 0\n\n  Object {\n    \"arrival_times\": \"2021-12-04T15:00:00\",\n    \"departure\": \"ICN\",\n    \"departure_times\": \"2021-12-02T11:00:00\",\n    \"destination\": \"CJU\",\n-   \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba99bed\",\n  }\n    at /Users/eunseo/helloWorld/fe-sprint-statesairline-server/statesairline/__test__/statesairline.test.js:209:24\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Advanced Challenges PUT /flight/:uuid 요청의 업데이트 된 객체를 응답으로 보냅니다","location":null,"status":"failed","title":"PUT /flight/:uuid 요청의 업데이트 된 객체를 응답으로 보냅니다"},{"ancestorTitles":["Advanced Challenges"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 0\n\n  Object {\n-   \"arrival_times\": \"2021-12-04T15:00:00\",\n    \"departure\": \"CJU\",\n-   \"departure_times\": \"2021-12-02T11:00:00\",\n    \"destination\": \"ICN\",\n-   \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba99bed\",\n  }\n    at /Users/eunseo/helloWorld/fe-sprint-statesairline-server/statesairline/__test__/statesairline.test.js:229:24\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Advanced Challenges PUT /flight/:uuid 요청의 일부 데이터만 업데이트 된 객체를 응답으로 보냅니다","location":null,"status":"failed","title":"PUT /flight/:uuid 요청의 일부 데이터만 업데이트 된 객체를 응답으로 보냅니다"}],"endTime":1660622936174,"message":"  ● Advanced Challenges › PUT /flight/:uuid 요청의 업데이트 된 객체를 응답으로 보냅니다\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 0\n\n      Object {\n        \"arrival_times\": \"2021-12-04T15:00:00\",\n        \"departure\": \"ICN\",\n        \"departure_times\": \"2021-12-02T11:00:00\",\n        \"destination\": \"CJU\",\n    -   \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba99bed\",\n      }\n\n      207 |       .then(res => {\n      208 |         const flight = JSON.parse(res.text);\n    > 209 |         expect(flight).toEqual({\n          |                        ^\n      210 |           uuid: 'af6fa55c-da65-47dd-af23-578fdba99bed',\n      211 |           departure: 'ICN',\n      212 |           destination: 'CJU',\n\n      at statesairline/__test__/statesairline.test.js:209:24\n\n  ● Advanced Challenges › PUT /flight/:uuid 요청의 일부 데이터만 업데이트 된 객체를 응답으로 보냅니다\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 0\n\n      Object {\n    -   \"arrival_times\": \"2021-12-04T15:00:00\",\n        \"departure\": \"CJU\",\n    -   \"departure_times\": \"2021-12-02T11:00:00\",\n        \"destination\": \"ICN\",\n    -   \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba99bed\",\n      }\n\n      227 |       .then(res => {\n      228 |         const flight = JSON.parse(res.text);\n    > 229 |         expect(flight).toEqual({\n          |                        ^\n      230 |           uuid: 'af6fa55c-da65-47dd-af23-578fdba99bed',\n      231 |           departure: 'CJU',\n      232 |           destination: 'ICN',\n\n      at statesairline/__test__/statesairline.test.js:229:24\n","name":"/Users/eunseo/helloWorld/fe-sprint-statesairline-server/statesairline/__test__/statesairline.test.js","startTime":1660622935450,"status":"failed","summary":""}],"wasInterrupted":false}